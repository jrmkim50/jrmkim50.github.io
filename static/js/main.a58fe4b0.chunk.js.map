{"version":3,"sources":["consts/problemIDtoProblem.js","consts/securityIDs.js","components/general/BackgroundImage.js","utils/createBackground.js","components/navbar/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["problemDict","securityDict","BackgroundImage","location","useLocation","useState","style","setStyle","useEffect","pathname","pathName","a","backgroundPath","includes","default","position","width","height","top","left","zIndex","opacity","backgroundImage","backgroundSize","showBackground","Navbar","to","Home","lazy","Problems","Post","Security","NotFound","App","className","fallback","path","ids","problemIDs","securityIDs","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HA0BeA,IA1BK,CAChB,kBAAmB,kBACnB,iBAAkB,iBAClB,YAAe,cACf,mBAAoB,mBACpB,aAAgB,eAChB,gBAAiB,gBACjB,cAAe,cACf,WAAY,WACZ,cAAe,cACf,iBAAkB,iBAClB,aAAc,aACd,qBAAsB,qBACtB,YAAa,YACb,kBAAmB,kBACnB,mBAAoB,mBACpB,iBAAkB,iBAClB,wBAAyB,wBACzB,gBAAiB,gBACjB,aAAc,aACd,mBAAoB,mBACpB,gBAAiB,0BACjB,eAAgB,oCAChB,gBAAiB,kB,gCCjBNC,IANM,CACjB,kBAAmB,kBACnB,gCAAiC,wCACjC,iBAAkB,mB,qMCCP,SAASC,IACpB,IAAMC,EAAWC,cACjB,EAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAtBAC,qBAAU,WACN,IAAQC,EAAaN,EAAbM,UACY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,kEAEXC,EAAiB,MACjBF,EAASG,SAAS,cAAeH,EAASG,SAAS,YAHxC,gCAIY,+BAJZ,OAIXD,EAJW,+CAMY,+BANZ,QAMXA,EANW,gBAQf,UAAIA,SAAJ,aAAI,EAAgBE,UAChBP,EClBT,CACHQ,SAAU,QACVC,MAAO,QACPC,OAAQ,QACRC,IAAK,EACLC,KAAM,EACNC,QAAS,EACTC,QAAS,GACTC,gBAAiB,QDUqBV,EAAeE,QCVnB,KAClCS,eAAgB,UDAO,4GAAH,sDAiBpBC,CAAef,KAChB,CAACN,IAGA,qBAAKG,MAAOA,GAAS,K,ME3Bd,SAASmB,IACpB,OACI,gCACI,cAAC,IAAD,CAAMC,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,YAAT,sBACA,cAAC,IAAD,CAAMA,GAAG,YAAT,8B,0BCCNC,EAAOC,gBAAK,kBAAM,iCAClBC,EAAWD,gBAAK,kBAAM,iCACtBE,EAAOF,gBAAK,kBAAM,uDAClBG,EAAWH,gBAAK,kBAAM,iCACtBI,EAAWJ,gBAAK,kBAAM,iCAEb,SAASK,IACtB,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,WAAD,CAAUC,SAAU,0CAApB,UACE,cAACjC,EAAD,IACA,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkC,KAAK,gBAAZ,SACE,cAACN,EAAD,CAAMO,IAAOC,QAEf,cAAC,IAAD,CAAOF,KAAK,YAAZ,SACE,cAACP,EAAD,MAEF,cAAC,IAAD,CAAOO,KAAK,gBAAZ,SACE,cAACN,EAAD,CAAMO,IAAOE,QAEf,cAAC,IAAD,CAAOH,KAAK,YAAZ,SACE,cAACL,EAAD,MAEF,cAAC,IAAD,CAAOK,KAAK,IAAII,OAAK,EAArB,SACE,cAACb,EAAD,MAEF,cAAC,IAAD,CAAOc,UAAWT,Y,UC1BbU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a58fe4b0.chunk.js","sourcesContent":["const problemDict = {\n    \"weird-algorithm\": \"Weird Algorithm\",\n    \"missing-number\": \"Missing Number\",\n    \"repetitions\": \"Repetitions\",\n    \"increasing-array\": \"Increasing Array\",\n    \"permutations\": \"Permutations\",\n    \"number-spiral\": \"Number Spiral\",\n    \"two-knights\": \"Two Knights\",\n    \"two-sets\": \"Two Sets\",\n    \"bit-strings\": \"Bit Strings\",\n    \"trailing-zeros\": \"Trailing Zeros\",\n    \"coin-piles\": \"Coin Piles\",\n    \"palindrome-reorder\": \"Palindrome Reorder\",\n    \"gray-code\": \"Gray Code\",\n    \"towers-of-hanoi\": \"Towers of Hanoi\",\n    \"creating-strings\": \"Creating Strings\",\n    \"apple-division\": \"Apple Division\",\n    \"chessboard-and-queens\": \"Chessboard and Queens\",\n    \"digit-queries\": \"Digit Queries\",\n    \"grid-paths\": \"Grid Paths\",\n    \"distinct-numbers\": \"Distinct Numbers\",\n    \"binary-search\": \"A Note on Binary Search\",\n    \"milk-factory\": \"USACO Bronze Milk Factory Problem\",\n    \"subarray-sums\": \"Subarray Sums\",\n}\n\nexport default problemDict;","const securityDict = {\n    \"race-conditions\": \"Race Conditions\",\n    \"web-security-notes-from-natas\": \"Web Security Notes from Natas Wargame\",\n    \"xor-encryption\": \"XOR Encryption\",\n}\n\nexport default securityDict;","import React, { useEffect, useState } from \"react\";\nimport createBackground from \"../../utils/createBackground\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function BackgroundImage() {\n    const location = useLocation();\n    const [style, setStyle] = useState(null);\n\n    useEffect(() => {\n        const { pathname } = location;\n        const showBackground = async (pathName) => {\n            try {\n                let backgroundPath = null;\n                if (pathName.includes(\"problems\") || pathName.includes(\"security\")) {\n                    backgroundPath = await import(\"../../assets/paint-background.jpeg\");\n                } else {\n                    backgroundPath = await import(\"../../assets/blue-watercolor-background.jpeg\");\n                }\n                if (backgroundPath?.default) {\n                    setStyle(createBackground(backgroundPath.default));\n                }\n            } catch (err) {\n                if (process.env.NODE_ENV === 'development') {\n                    console.log(err.message, err.stack)\n                }\n            }\n        }\n        showBackground(pathname)\n    }, [location])\n\n    return (\n        <div style={style || {}}/>\n    )\n}","export default function createBackground(path) {\n    return {\n        position: 'fixed',   \n        width: '100vw',\n        height: '100vh',\n        top: 0,\n        left: 0,\n        zIndex: -1,\n        opacity: 0.5,\n        backgroundImage: \"url('\" + path + \"')\",\n        backgroundSize: 'cover',\n    };\n}","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport \"./Navbar.css\";\n\nexport default function Navbar() {\n    return (\n        <nav>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/security\">Security</Link>\n            <Link to=\"/problems\">CSES Problems</Link>\n        </nav>\n    )\n}","import React, { lazy, Suspense } from \"react\";\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport BackgroundImage from \"./components/general/BackgroundImage\";\nimport Navbar from \"./components/navbar/Navbar\"\nimport './App.css';\nimport problemIDs from \"./consts/problemIDtoProblem\";\nimport securityIDs from \"./consts/securityIDs\";\nconst Home = lazy(() => import(\"./views/home/Home\"));\nconst Problems = lazy(() => import(\"./views/problems/Problems\"));\nconst Post = lazy(() => import(\"./components/post/Post\"));\nconst Security = lazy(() => import(\"./views/security/Security\"));\nconst NotFound = lazy(() => import(\"./views/NotFound\"));\n\nexport default function App() {\n  return (\n    <div className=\"app\">\n      <Suspense fallback={<div>Loading</div>}>\n        <BackgroundImage/>\n        <Navbar/>\n        <Switch>\n          <Route path=\"/problems/:id\">\n            <Post ids = {problemIDs}/>\n          </Route>\n          <Route path=\"/problems\">\n            <Problems />\n          </Route>\n          <Route path=\"/security/:id\">\n            <Post ids = {securityIDs}/>\n          </Route>\n          <Route path=\"/security\">\n            <Security />\n          </Route>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route component={NotFound}/>\n        </Switch>\n      </Suspense>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}